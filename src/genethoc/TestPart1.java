/* 

 * DO NOT EDIT THIS FILE 

*/

package genethoc;


import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;

/**
 *
 * @author nickdaltonbk
 */
public final  class TestPart1
{
    protected
            
    static int totalCorrect = 0 ; 
    static Random rn = new Random();
    static  ArrayList<String> gNames = new ArrayList<> ( ) ;
    static Part1Test gStdentwork = null ; 
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)
    {
         gStdentwork = new Part1Test();
         runAssessment( gStdentwork ) ;

    }
    public static void runAssessment( Part1Test thingToTest ) 
    { 
      assert thingToTest !=null; 
      totalCorrect= 0 ; // reset 
      System.out.println("TESTING PART 1 ");
      gStdentwork = thingToTest ; 
      Random rn = new Random();
      
      for( int a = 0 ; a < 40_000 ; a ++ )
      { 
           String it =  randomString( 20 ,  rn);
           gNames.add(it); 
      }
      
      ProcessQuestion1(); 
      ProcessQuestion2(); 
      ProcessQuestion3(); 
      processQuestion4(); 
      ProcessQuestion5();
      
      System.err.println("\nTOTAL CORRECT " +  totalCorrect  );
      System.err.println("Final Mark " +  (totalCorrect*2 )  );
      
    }
    
    protected static void ProcessQuestion1()
    { 
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ; 
      
      ProcessQuestion1Base(); 
        // start timer 
      LocalDateTime start = LocalDateTime.now(); 
       
       for( String name : gNames )
       { 
            gStdentwork.Test1(name);
       } 
       
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ; 
      System.err.print("Q1 student time ~ " +  duration.toMillis()  + " ");
      
      List<String> stdList1 = gStdentwork.q1; 
      
      Class listClass = stdList1.getClass(); 
      String name = listClass.getName();
      
    
      if(   containsSecretString( name,  578806391  , 9)  )
      { 
          System.err.println(":Question 1 CORRECT 1");
          totalCorrect+= 1; 
      }else
      { 
           System.err.println(":Question 1 WRONG  0");
      }
    }
    
    static List<String> slow = new  LinkedList<String>() ; // incorrect 
    
    protected static  void Question1Base( String itemToAdd )
    { 
        slow.add( slow.size()/2 , itemToAdd ) ; 
    }
    
    protected static void ProcessQuestion1Base()
    {
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ;
        // start timer 
      LocalDateTime start = LocalDateTime.now(); 
     
       
      for( String name : gNames )
       { 
           Question1Base(name);
       } 
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ; 
      System.err.println("Q1 base time ~  " +  duration.toMillis()  + " ");
    }
    //--------------------------------------------------------------------------
    protected static void ProcessQuestion2()
    { 
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ; 
      
      int hash = ProcessQuestion2Base(); 
        // start timer 
      LocalDateTime start = LocalDateTime.now(); 
       
      for( String name : gNames )
      { 
            gStdentwork.Test2(name);
      } 
       
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ; 
      System.err.print("Q2 stdnt time ~ " +  duration.toMillis()  + " ");
      
      hash = q2Base.hashCode();
      int studentHash = gStdentwork.q2.hashCode(); 
      if( studentHash != hash  )
      { 
       // System.err.printf(" hash =%d hash %d", gStdentwork.q2.size(),hash );
        System.err.println("The hashCodes don't match - are you adding at front? :Question 2 WRONG  0");
        return ; 
      }
      
      List<String> stdList1 = gStdentwork.q2; 
      
      Class listClass = stdList1.getClass(); 
      String name = listClass.getName();

      
      if( containsSecretString( name,  -958795145 , 10) )// do as Hash 
      { 
          System.err.println(":Question 2 CORRECT 1");
          totalCorrect+= 1; 
      }else
      { 
           System.err.println(":Question 2 WRONG  0");
      }
    }
    //--------------------------------------------------------------------------
    private  static List<String> q2Base  =  new ArrayList<String>() ;  // new  LinkedList<String>() ;// 
    
    private  static void  Question2Base( String itemToAdd )
    { 
        q2Base.add( 0 , itemToAdd ) ; // add to front 
    }
    private static int ProcessQuestion2Base()
    { 
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ; 
        // start timer 
      LocalDateTime start = LocalDateTime.now(); 
       
      for( String name : gNames )
      { 
            Question2Base(name);
      } 
      
       
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration  = Duration.between(start,end ) ; 
      System.err.println("Q2 base time = " +  duration.toMillis() );
      return q2Base.hashCode(); 
    } 
    //--------------------------------------------------------------------------
    private static Object  q3Slow = new String( ""); 
    private static void  Question3Slow( String addThis ) 
    { 
        q3Slow = q3Slow + addThis ; 
        
    }
    protected static void ProcessQuestion3Before()
    {
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ;
        // start timer 
      LocalDateTime start = LocalDateTime.now(); 
       
  
      for( int a = 0 ; a <  gNames.size() / 2 ; a++ )
      { 
          Question3Slow( gNames.get(a)); 
      }
        
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ;
      long hashSlowCorrect  = q3Slow.toString().hashCode(); 
      System.err.println("Q3 base time ~  " +  duration.toMillis()  ) ; 
                      //   +     " hash" + hashSlowCorrect);
    }
    
    private static void ProcessQuestion3()
    { 
      assert gStdentwork !=null ; 
      assert gNames !=null ;
      assert gNames.size() > 100 ; 
      
     
      ProcessQuestion3Before();
        
      LocalDateTime start = LocalDateTime.now(); 
       
      
      for( int a = 0 ; a <  gNames.size() / 2 ; a++ )
      { 
          gStdentwork.Question3( gNames.get(a)); 
      }
      
       
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ; 
      int studenHash = gStdentwork.q3.toString().hashCode() ; 
      
      
      System.err.print("Q3 stdnt time ~ " +  duration.toMillis() ) ;    


      long hashSlowCorrect  = q3Slow.toString().hashCode(); 
      if(  hashSlowCorrect !=  studenHash)
      { 
           System.err.println("Student code not creating same result. Question 3 WRONG 0");
           return ; 
      }
      Object stdList1 = gStdentwork.q3; 
      assert stdList1 != null ; 
      
      Class listClass = stdList1.getClass(); 
      String name = listClass.getName();

      
      if(  containsSecretString(  name , -240966703,12  ) || 
              containsSecretString( name , 1122914858 , 13 )) 
             
      { 
          System.err.println(":Question 3 CORRECT 1");
          totalCorrect+= 1; 
      }else
      { 
         System.err.println(":Question 3 WRONG 0");
      }
      
    }
    
    
    //--------------------------------------------------------------------------
    public static Collection<String> q4Slow = new ArrayList<String>(); 
    public static void Question4SetupBASE( String addThis)
    { 
        q4Slow.add( addThis ); 
    }
    /**
     *  
     * @param findThis
     * @return true if is inside - false if not found. 
     */
    public static boolean Question4FindThisBASE( String findThis)
    { 
        for( String it: q4Slow)
        { 
            if( it.equals( findThis ))return true ; 
        } 
        
        return false ; 
    }
    
    private static void  processQuestion4()
    { 
      
      for( String name : gNames )
      { 
            gStdentwork.Test4Setup(name);
            Question4SetupBASE( name ) ; 
      } 
      LocalDateTime startSlow = LocalDateTime.now(); 
      
      for( String name : gNames )
      { 
         boolean  result  =   Question4FindThisBASE(name);
         assert result == true ; 
         boolean notFound  =  Question4FindThisBASE(name + "453" ) ; 
         assert notFound == false ; 
      } 
      LocalDateTime endSlow = LocalDateTime.now(); 
      Duration durationSlow = Duration.between(startSlow,endSlow ) ; 
      System.err.println("Q4 base time = " +  durationSlow.toMillis()   );
      
      LocalDateTime start = LocalDateTime.now(); 
      
      for( String name : gNames )
      { 
         boolean  result  =   gStdentwork.Test4FindThis(name);
         if( result == false ) 
         { 
             System.err.println(":Question 4 WRONG 0");
             break ; 
         } 
         boolean notFound  =  gStdentwork.Test4FindThis(name + "453" ) ; 
         assert notFound == false ; 
      } 
 
      LocalDateTime end  =   LocalDateTime.now(); 
      Duration duration = Duration.between(start,end ) ; 
      
      System.err.print("Q4 stdnt time ~ " +  duration.toMillis()   );
      
      Object stdList1 = gStdentwork.q4; 
      assert stdList1 != null ; 
      
      Class listClass = stdList1.getClass(); 
      String name = listClass.getName();
      if( containsSecretString( name, -1932803762 , 7  ) || 
          containsSecretString( name, 600982718 , 7  )   || 
          containsSecretString( name, -1932797868 , 7  )   || 
          containsSecretString( name, 600988612  , 7  )  )
  
      { 
          System.err.println(":Question 4 CORRECT 1");
          totalCorrect+= 1; 
      }else
      { 
         System.err.println(":Question 4 WRONG 0");
      }
      
           
     
    }
    private static boolean containsSecretString( String it , int hash , int length )
    { 
        assert  length > 1 ; 
        for( int a = 0 ; a < (it.length()-(length-1)) ; a ++ )
        { 
            String sub = it.substring(a, a+length); 
         
            if( sub.hashCode() == hash)
            { 
                return true ;
            } 
        }
        return false ; 
    }
    //--------------------------------------------------------------------------
    static protected void Question5AddEveryOneOfTheseToBase( Collection<String> that,
                                                        Collection<String> q5 )
    { 

        for( String it: that )
        { 
          if( ! q5.contains( it))
            { 
                q5.add( it ); 
            }
        } 
    }
    //--------------------------------------------------------------------------
    protected static void ProcessQuestion5() 
    { 
        final int K = 3 ; 
        assert gStdentwork != null ; 
      
        Collection<String> q5 = new ArrayList<String>();  // you can change this if you like but not name 
        LocalDateTime startSlow = LocalDateTime.now(); 
          
        for( int a = 0 ; a < K ; a++ )
        { 
            Question5AddEveryOneOfTheseToBase( gNames, q5); 
        } 

        LocalDateTime endSlow = LocalDateTime.now(); 
        Duration durationSlow = Duration.between(startSlow,endSlow ) ; 
        //System.err.println(" Count " +  q5.size() + " of " + gNames.size());
       
        System.err.println("Q5 base time ~ " +  durationSlow.toMillis()   );
        
        LocalDateTime startStudent = LocalDateTime.now(); 
        
        for( int a = 0 ; a < K ; a++ )
        { 
            gStdentwork.Test5AddEveryOneOfTheseToQ5( gNames ); 
        } 
        
        LocalDateTime  endStudent = LocalDateTime.now(); 
        Duration durationStudent = Duration.between(startStudent,endStudent ) ; 
        
        System.err.print("Q5 stdnt time ~ " +  durationStudent.toMillis()    );
        
        assert gStdentwork.q5!=null :"Null forbidden as a class"; 
            
        if(  gStdentwork.q5.equals(q5.hashCode()) ) 
        { 
            
             System.err.println(":Question 5 WRONG are you  0" +  gStdentwork.q5.size() + " " +   q5.size() );
             return ; 
        }
        Class listClass = gStdentwork.q5.getClass(); 
        String name = listClass.getName();
        if( name.contains("Set") || name.contains("Map"))
        { 
          System.err.println(":Question 5 CORRECT 1");
          totalCorrect += 1; 
        }else
        { 
           System.err.println(":Question 5 WRONG 0");
        }
       
    }
    
    
    //--------------------------------------------------------------------------
    protected static String randomString( int howLong , Random rn) 
    { 
        assert howLong > 0 :"No negatives"; 
        String a = ""; 
        for( int b = 0 ; b < howLong ; b++  )
        { 
            a += (char)(rn.nextInt('Z'-'A'))+ 'A'; 
        }
        return a; 
    }
}
